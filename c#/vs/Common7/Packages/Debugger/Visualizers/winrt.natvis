<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="Platform::String">
    <AlternativeType Name="HSTRING__" />
    <DisplayString>{this,sh}</DisplayString>
    <StringView>this,sh</StringView>
    <Expand>
      <Item Name="Length">WindowsGetStringLen((HSTRING)this)</Item>
      <Item Name="[Pointer]">WindowsGetStringRawBuffer((HSTRING)this, nullptr)</Item>
    </Expand>
  </Type>

  <Type Name="Platform::WriteOnlyArray&lt;*&gt;">
    <DisplayString>{{size = {__size}}}</DisplayString>
    <Expand>
      <Item Name="[size]">__size</Item>
      <ArrayItems>
        <Size>__size</Size>
        <ValuePointer>__data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>


  <Type Name="Platform::Collections::Vector&lt;*&gt;">
    <AlternativeType Name="Platform::Collections::VectorView&lt;*&gt;" />
    <DisplayString>{*m_vec._Ptr}</DisplayString>
    <Expand>
      <ExpandedItem>*m_vec._Ptr</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="Platform::Collections::Map&lt;*&gt;">
    <AlternativeType Name="Platform::Collections::MapView&lt;*&gt;" />
    <DisplayString>{*m_map._Ptr}</DisplayString>
    <Expand>
      <ExpandedItem>*m_map._Ptr</ExpandedItem>
    </Expand>
  </Type>


  <Type Name="Windows::Foundation::Collections::Internal::Vector&lt;*&gt;">
    <DisplayString>{{size = {_uSize}}}</DisplayString>
    <Expand>
      <Item Name="[size]">_uSize</Item>
      <Item Name="[capacity]">_uCapacity</Item>
      <ArrayItems>
        <Size>_uSize</Size>
        <ValuePointer>_paT</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- Xaml section -->

  <!-- TODO: Handle string pool case -->
  <Type Name="XSTRING_BASE">
    <AlternativeType Name="CXString"/>
    <DisplayString Condition="this == 0">""</DisplayString>
    <DisplayString Condition="cString == 0">""</DisplayString>
    <DisplayString>{(wchar_t *)((int)pString &amp; ~1),su}</DisplayString>
    <StringView>(wchar_t *)((int)pString &amp; ~1),su</StringView>
  </Type>

  <Type Name="DirectUI::PropertyInfo">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{*(m_spName.m_ptr),sub}</DisplayString>
  </Type>

  <!-- TODO: Need to handle more types -->
  <Type Name="CValue">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString Condition="m_type == valueFloat">{m_eValue}</DisplayString>
    <DisplayString Condition="m_type == valueSigned">{m_iValue}</DisplayString>
    <DisplayString Condition="m_type == valueBool">{m_nValue}</DisplayString>
    <DisplayString Condition="m_type == valueEnum">{m_nValue}</DisplayString>
    <DisplayString Condition="m_type == valueString">{m_pchValue,su}</DisplayString>
    <DisplayString Condition="m_type == valueObject">{*m_pdoValue}</DisplayString>
    <DisplayString Condition="m_type == valueSize">{m_peValue[0]},{m_peValue[1]}</DisplayString>
    <DisplayString Condition="m_type == valueDouble">{m_pdfValue}</DisplayString>
    <DisplayString Condition="m_type == valueNull">[null]</DisplayString>
    <Expand>
      <Item Name="[Value]" Condition="m_type == valueObject">m_pdoValue</Item>
    </Expand>
  </Type>

  <!-- TODO: Handle case where collection is not flattened -->
  <Type Name="CDOCollection">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{size = {m_nObject}}}</DisplayString>
    <Expand>
      <Item Name="[size]">m_nObject</Item>
      <ArrayItems>
        <Size>m_nObject</Size>
        <ValuePointer>m_pFlattened</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="Windows::Foundation::ValueScalar&lt;*&gt;">
    <Version Name="WinTypes.dll"/>
    <DisplayString>{($T1)_value}</DisplayString>
  </Type>

  <Type Name="DirectUI::EffectiveValueEntry">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{*m_pValue}</DisplayString>
    <Expand>
      <ExpandedItem>*m_pValue</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::BaseEffectiveValue">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{*(m_BaseValue.m_pValue)}</DisplayString>
    <Expand>
      <ExpandedItem>*(m_BaseValue.m_pValue)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="std::pair&lt;DirectUI::DependencyPropertyInfo * const, DirectUI::EffectiveValueEntry *&gt;">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{{*first,sub} = {second}}}</DisplayString>
    <Expand>
      <Item Name="Name">first</Item>
      <Item Name="Value">second</Item>
    </Expand>
  </Type>

  <Type Name="DirectUI::UIElementCollection">
    <Version Name="Windows.UI.Xaml.dll"/>
    <Expand>
      <ExpandedItem>*(CUIElementCollection*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::ValueTypeViewBase&lt;*&gt;">
    <Version Name="Windows.UI.Xaml.dll"/>
    <Expand>
      <ExpandedItem>m_list</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::ViewBase&lt;*&gt;">
    <Version Name="Windows.UI.Xaml.dll"/>
    <Expand>
      <ExpandedItem>m_list</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CUIElement">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(m_pstrName)}}}</DisplayString>
    <Expand>
      <Item Name="Name">m_pstrName</Item>
      <Item Name="IsDoubleTapEnabled">(bool)m_bDoubleTapEnabled</Item>
      <Item Name="IsRightTapEnabled">(bool)m_bRightTapEnabled</Item>
      <Item Name="IsTapEnabled">(bool)m_bTapEnabled</Item>
      <Item Name="ManipulationMode">m_uiManipulationMode</Item>
      <Item Name="IsHoldingEnabled">(bool)m_bHoldEnabled</Item>
    </Expand>
  </Type>

  <Type Name="CFrameworkElement">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(m_pstrName)}}}</DisplayString>
    <Expand>
      <Item Name="Width">m_eWidth</Item>
      <Item Name="Height">m_eHeight</Item>
      <Item Name="MouseCursor">m_eMouseCursor</Item>
      <Item Name="Parent" Condition="m_pLogicalParent != 0">m_pLogicalParent</Item>
      <ExpandedItem>*(CUIElement*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CControl">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(m_pstrName)}}}</DisplayString>
    <Expand>
      <Item Name="IsTabStop">(bool)m_fIsTabStop</Item>
      <Item Name="TabIndex">m_cTabIndex</Item>
      <Item Name="HorizontalContentAlignment">m_horizontalContentAlignment</Item>
      <Item Name="VerticalContentAlignment">m_verticalContentAlignment</Item>
      <Item Name="BorderThickness">m_borderThickness</Item>
      <Item Name="Padding">m_padding</Item>
      <Item Name="IsFocused">(bool)m_fIsFocused</Item>
      <Item Name="Template">m_pTemplate</Item>
      <ExpandedItem>*(CFrameworkElement*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::Control">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)}}}</DisplayString>
    <Expand>
      <Item Name="Dependency Properties" Condition="m_mapValueTable._Mysize > 0">m_mapValueTable</Item>
    </Expand>
  </Type>

  <Type Name="CContentControl">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(m_pstrName)} Content = {m_content}}}</DisplayString>
    <Expand>
      <Item Name="Content">&amp;m_content</Item>
      <ExpandedItem>*(CControl*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::ContentControl">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)} Content = {((CContentControl*)m_pDO)-&gt;m_content}}}</DisplayString>
    <Expand>
      <ExpandedItem>*(CContentControl*)(((CDependencyObject*)m_pDO))</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::Button">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)} Content = {((CContentControl*)m_pDO)-&gt;m_content}}}</DisplayString>
    <Expand>
      <ExpandedItem>*(CContentControl*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CTextBoxBase">
    <Version Name="Windows.UI.Xaml.dll"/>
    <Expand>
      <Item Name="MaxLength">m_iMaxLength</Item>
      <Item Name="IsReadOnly">(bool)m_bIsReadOnly</Item>
      <Item Name="AcceptsReturn">(bool)m_bAcceptsReturn</Item>
      <Item Name="TextWrapping">m_textWrapping</Item>
      <Item Name="TextAlignment">m_textAlignment</Item>
      <ExpandedItem>*(CControl*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CTextBox">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*m_pstrName} Text = {*m_pText}}}</DisplayString>
    <Expand>
      <Item Name="Text">m_pText</Item>
      <Item Name="SelectionLength">m_iSelectionLength</Item>
      <Item Name="SelectionStart">m_iSelectionStart</Item>
      <Item Name="SelectedText">m_pSelectedText</Item>
      <Item Name="IsSpellCheckEnabled">(bool)m_isSpellCheckEnabled</Item>
      <Item Name="IsTextPredictionEnabled">(bool)m_isTextPredictionEnabled</Item>
      <Item Name="InputScope">m_pInputScope</Item>
      <ExpandedItem>*(CTextBoxBase*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::TextBox">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)} Text = {*(((CTextBox*)m_pDO)-&gt;m_pText)}}}</DisplayString>
    <Expand>
      <ExpandedItem>*(CTextBox*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CPasswordBox">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*m_pstrName} Password = {*m_pPassword}}}</DisplayString>
    <Expand>
      <Item Name="Password">m_pPassword</Item>
      <Item Name="PasswordChar">m_pPasswordChar</Item>
      <Item Name="IsPasswordRevealButtonEnabled">m_fRevealButtonEnabled</Item>
      <ExpandedItem>*(CTextBoxBase*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::PasswordBox">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)} Password = {*(((CPasswordBox*)m_pDO)-&gt;m_pPassword)}}}</DisplayString>
    <Expand>
      <ExpandedItem>*(CPasswordBox*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CPanel">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(m_pstrName)}}}</DisplayString>
    <Expand>
      <Item Name="Children">m_pChildren</Item>
      <Item Name="IsItemsHost">(bool)m_bItemsHost</Item>
      <ExpandedItem>*(CFrameworkElement*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CStackPanel">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(m_pstrName)}}}</DisplayString>
    <Expand>
      <Item Name="Orientation">m_orientation</Item>
      <ExpandedItem>*(CPanel*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::Panel">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)}}}</DisplayString>
    <Expand>
      <ExpandedItem>*(CPanel*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CBorder">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(m_pstrName)}}}</DisplayString>
    <Expand>
      <Item Name="CornerRadius">m_cornerRadius</Item>
      <ExpandedItem>*(CFrameworkElement*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::Border">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)}}}</DisplayString>
    <Expand>
      <ExpandedItem>*(CBorder*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <!-- Windows.UI.Xaml.dll has a special CString class which
       is NOT the same as Atl::CStringW, so it needs its own visualizer.
       -->
  <Type Name="CString">
    <Version Name="Windows.UI.Xaml.dll" />
    <DisplayString Condition="this == 0">""</DisplayString>
    <DisplayString Condition="this != 0">{m_pstrString}</DisplayString>
    <StringView Condition="this != 0">m_pstrString</StringView>
  </Type>

  <Type Name="CTextBlock">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*m_pstrName} Text = {*(m_pText)}}}</DisplayString>
    <Expand>
      <Item Name="Text">m_pText</Item>
      <Item Name="Inlines">m_pInlines</Item>
      <Item Name="TextWrapping">m_textWrapping</Item>
      <Item Name="TextTrimming">m_textTrimming</Item>
      <Item Name="TextAlignment">m_textAlignment</Item>
      <Item Name="Padding">m_padding</Item>
      <Item Name="IsTextSelectionEnabled">(bool)m_isTextSelectionEnabled</Item>
      <ExpandedItem>*(CFrameworkElement*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::TextBlock">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)} Text = {*(((CTextBlock*)m_pDO)-&gt;m_pText)}}}</DisplayString>
    <Expand>
      <ExpandedItem>*(CTextBlock*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::ToggleButton">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)} Content = {((CContentControl*)m_pDO)-&gt;m_content}}}</DisplayString>
    <Expand>
      <ExpandedItem>*(DirectUI::Control*)this,nd</ExpandedItem>
      <ExpandedItem>*(CContentControl*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CImageBase">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Source = {*(m_pImageSource-&gt;m_pstrSource)} Width = {m_eWidth} Height = {m_eHeight}}}</DisplayString>
    <Expand>
      <Item Name="Source">m_pImageSource</Item>
      <Item Name="Stretch">m_Stretch</Item>
      <ExpandedItem>*(CMediaBase*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::Image">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Source = {*(((CImage*)m_pDO)-&gt;m_pImageSource-&gt;m_pstrSource)} Width = {((CFrameworkElement*)m_pDO)-&gt;m_eWidth} Height = {((CFrameworkElement*)m_pDO)-&gt;m_eHeight}}}</DisplayString>
    <Expand>
      <ExpandedItem>*(CImage*)(m_pDO)</ExpandedItem>
      <Item Name="PlayToSource">m_pPlayToSource</Item>
    </Expand>
  </Type>

  <Type Name="CRoutedEventArgs">
    <Version Name="Windows.UI.Xaml.dll"/>
    <Expand>
      <Item Name="OriginalSource">m_pSource</Item>
    </Expand>
  </Type>

  <Type Name="DirectUI::RoutedEventArgs">
    <Version Name="Windows.UI.Xaml.dll"/>
    <Expand>
      <ExpandedItem>*(CRoutedEventArgs*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CItemsControl">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(m_pstrName)}}}</DisplayString>
    <Expand>
      <Item Name="Items">m_pItemCollection</Item>
      <ExpandedItem>*(CControl*)this,nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::ItemsControl">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)}}}</DisplayString> 
    <Expand>
      <ExpandedItem>*(CItemsControl*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::ComboBox">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)} Item Count={m_selection.m_pSelectedItems-&gt;m_list._Mysize}}}</DisplayString>
    <Expand>
      <Item Name="SelectedItem" Condition="m_selection.m_pSelectedItems-&gt;m_list._Mysize &gt; 0">((CItemsControl*)(m_pDO))->m_pItemCollection->m_pFlattened[m_selection.m_pSelectedItems-&gt;m_indexlist._Myhead-&gt;_Next-&gt;_Myval]</Item>
      <Item Name="SelectedItem" Condition="m_selection.m_pSelectedItems-&gt;m_list._Mysize == 0">(void*)0</Item>
      <Item Name="SelectedIndex" Condition="m_selection.m_pSelectedItems-&gt;m_list._Mysize &gt; 0">m_selection.m_pSelectedItems-&gt;m_indexlist._Myhead-&gt;_Next-&gt;_Myval</Item>
      <Item Name="SelectedIndex" Condition="m_selection.m_pSelectedItems-&gt;m_list._Mysize == 0">-1</Item>
      <ExpandedItem>*(DirectUI::Control*)this,nd</ExpandedItem>
      <ExpandedItem>*(CItemsControl*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="DirectUI::ListBox">
    <Version Name="Windows.UI.Xaml.dll"/>
    <DisplayString>{{Name = {*(((CDependencyObject*)m_pDO)-&gt;m_pstrName)} Item Count={m_selection.m_pSelectedItems-&gt;m_list._Mysize}}}</DisplayString>
    <Expand>
      <Item Name="SelectedIndex" Condition="m_selection.m_pSelectedItems-&gt;m_list._Mysize &gt; 0">m_selection.m_pSelectedItems-&gt;m_indexlist._Myhead-&gt;_Next-&gt;_Myval</Item>
      <Item Name="SelectedIndex" Condition="m_selection.m_pSelectedItems-&gt;m_list._Mysize == 0">-1</Item>
      <Item Name="SelectedItem" Condition="m_selection.m_pSelectedItems-&gt;m_list._Mysize &gt; 0">((CItemsControl*)(m_pDO))->m_pItemCollection->m_pFlattened[m_selection.m_pSelectedItems-&gt;m_indexlist._Myhead-&gt;_Next-&gt;_Myval]</Item>
      <Item Name="SelectedItem" Condition="m_selection.m_pSelectedItems-&gt;m_list._Mysize == 0">(void*)0</Item>
      <Item Name="SelectedItems">m_selection.m_pSelectedItems</Item>
      <ExpandedItem>*(DirectUI::Control*)this,nd</ExpandedItem>
      <ExpandedItem>*(CItemsControl*)(m_pDO)</ExpandedItem>
    </Expand>
  </Type>

  <!--End Xaml section -->

  <!-- Windows::Web section-->
  <Type Name="AutoPtr&lt;*&gt;">
    <!-- We only want this under Windows.Web.dll as there are other types
    with the same name and different implementation-->
    <Version Name="Windows.Web.dll"/>
    <DisplayString>{obj}</DisplayString>
    <Expand>
      <ExpandedItem>obj</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="Windows::Web::Internal::AutoStringPtr">
    <Version Name="Windows.Web.dll"/>
    <DisplayString>{sharedRef.obj-&gt;string._hstring,sh}</DisplayString>
    <Expand />
  </Type>

  <Type Name="Windows::Web::Internal::NameValueCollection&lt;*&gt;::Entry">
    <Version Name="Windows.Web.dll"/>
    <DisplayString>{key},{value}</DisplayString>
    <Expand>
      <Item Name="key">key</Item>
      <Item Name="value">value</Item>
    </Expand>
  </Type>

  <Type Name="Windows::Web::Internal::NameValueCollection&lt;*&gt;">
    <Version Name="Windows.Web.dll"/>
    <DisplayString>{{size = {count}}}</DisplayString>
    <Expand>
      <Item Name="[size]">count</Item>
      <LinkedListItems>
        <Size>count</Size>
        <HeadPointer>head</HeadPointer>
        <NextPointer>next</NextPointer>
        <ValueNode>this</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <!--End Windows::Web section-->

  <!--
    Platform::Exception contains addtional informatio that are store in following struct:
        typedef struct {
            wchar_t* description;
            wchar_t* restrictedErrorString;
            wchar_t* restrictedErrorReference;
            wchar_t* capabilitySid
        } ExceptionInfo;
    To extract data it's required to do cast (ExceptionInfo*)(this - sizeof(void*)), pointer may be nullptr
  -->
  <Type Name="Platform::Exception">
    <DisplayString>{{HResult = {_hresult, hr}}}</DisplayString>
    <Expand>
        <Item Name="[Error Description]" Condition="*((int*)((size_t)this) - 1) != 0 &amp;&amp; *(wchar_t**)(*((int*)((size_t)this) - 1)) != 0">
            *(wchar_t**)(*((int*)((size_t)this) - 1)) <!-- description -->
        </Item>

        <Item Name="[Error Message]" Condition="*((int*)((size_t)this) - 1) != 0 &amp;&amp; *((wchar_t**)(*((int*)((size_t)this) - 1)) + 1) != 0">
            *((wchar_t**)(*((int*)((size_t)this) - 1)) + 1) <!-- restrictedErrorString -->
        </Item>
        <Item Name="[Error Message]" Condition="*((int*)((size_t)this) - 1) != 0 &amp;&amp; *((wchar_t**)(*((int*)((size_t)this) - 1)) + 1) == 0 &amp;&amp; *((wchar_t**)(*((int*)((size_t)this) - 1)) + 2) != 0">
            *((wchar_t**)(*((int*)((size_t)this) - 1)) + 2),restrictedException <!-- restrictedErrorReference -->
            <!-- *((wchar_t**)(*((int*)((int)this) - 1)) + 3) -> capabilitySid -->
        </Item>
        <Item Name="[HResult]">_hresult, hr</Item>
    </Expand>
  </Type>

</AutoVisualizer>
